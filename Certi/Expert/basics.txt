-SW ACA에 후기 글들 많이 보고 고찰, 공부법 습득
-자신의 생각(방법)을 코드로 구현하는 연습.  즉 방법(알고리즘)을 구현하는 능력 자체를 익히기
-알고리즘은 거의 다 알아야 한다. 수학도
-SW ACA 문제들 풀고, 다른사람보다 느린 이유 정확히 짚고 넘어감. 그다음 그것들보다 더 빠르게 하는 방법연구까지
-구현은 기본+ 최적화 고찰
-생각보다 유명 알고리즘을 써야하는 경우는 별로 없다.

-"저는 스터디를 해본적 없고, 알고리즘이 기본이지만 lazy propagation이나 prefix array 같은 고급알고리즘은 모릅니다. 물론 보통 아십니다. 대신 어느 알고리즘이 어느 상황에 좋은지는 꼭 알고있어야 합니다. 예를들어 곱셈 기출에 FFT를 구현하는 것이 왜 시간낭비인지 구현전에 예상해야 합니다. main.cpp를 반드시 분석하여 출제자의 숨겨진 의도나 함정을 파악하는 것이 중요합니다."
익스도 컴파일러 수준의 최적화, c언어의 특성을 깊게 아는것과 상관있는 문제는 10%도 되지 않는다. 역시 if for array로 풀 수 있는 구성으로 되어있으나 그 방법을 얼마나 효율적으로 가져갈 수 있느냐의 차이 

---
-필요한 것 : 

ㅁ다양한 시간.메모리 최적화 기법 

ㅁ포인터, 형 변환에 대한 이해 

ㅁ확률 분포에 대한 이해

---
-필요없는 것 : 특정문제에 적용 가능한 복잡한 알고리즘 암기


-기타 기출에 관했던 것들
-카라추바
-FFT
진법변환
c인터프리터,
 asm인터프리터